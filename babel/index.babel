const {Component} = React;

class TaskStore {
  constructor() {
    this._selectedTask = null;
    
    if(window.localStorage.taskStoreData)
      this._tasks = JSON.parse(window.localStorage.taskStoreData);
    else
      this._tasks = [];
    
    this._listeners = [];
    this.onChange(() => {
      window.localStorage.taskStoreData = JSON.stringify(this._tasks);
    });
  }
  
  onChange(cb) {
    this._listeners.push(cb);
  }
  
  change() {
    this._listeners.forEach((listener) => listener());
  }
  
  getTasks() {
    return this._tasks;
  }
  
  getTask(id) {
    const index = this._tasks.indexOf(id);
    if(index == -1)
      throw new Error("Task not found");
    
    return this._tasks[index];
  }
  
  getTaskByIndex(index) {
    return this._tasks[index];
  }
  
  getSelectedTask() {
    return this._selectedTask;
  }
  
  createTask(name, repeats) {
    let task = {
      id: Date.now(),
      name,
      repeats,
      wasSelected: false
    };
    
    this._tasks.push(task);
    
    this.change();
  }
  
  updateTask(id, name, repeats) {
    let task = this.getTask(id);
    task.name = name;
    task.repeats = repeats;
    task.wasSelected = false;
    this.change();
  }
  
  deleteTask(id) {
    const index = this._tasks.indexOf(id);
    if(index == -1)
      throw new Error("Task not found");
    
    this._tasks.splice(index, 1);
    
    this.change();
  }
  
  setSelectedTask(id) {
     this._tasks.forEach((task) => {
       task.wasSelected = (task == this._selectedTask);
     });

    if(id != null)
      this._selectedTask = this.getTask(id);
    else
      this._selectedTask = null;
    
    this.change();
  }
}

const taskStore = new TaskStore();

const Actions = {
  createTask(name, repeats) {
    taskStore.createTask(name, repeats);
  },
  updateTask(id, name, repeats) {
    taskStore.updateTask(id, name, repeats);
  },
  deleteTask(id) {
    taskStore.deleteTask(id);
  },
  pickRandomTask() {
    const index = Math.floor(Math.random() * taskStore.getTasks().length);
    taskStore.setSelectedTask(taskStore.getTaskByIndex(index));
  },
  finishSelectedTask() {
    const selected = taskStore.getSelectedTask();

    if(!selected)
      return;
    
    if(!selected.repeats)
      taskStore.deleteTask(selected);
    
    taskStore.setSelectedTask(null);
  }
};

class TaskView extends Component {
  render() {
    let task = this.props.task;
    
    return <li>
      <input className={task.wasSelected ? "selected" : ""} placeholder="Enter a name..." value={task.name} onChange={(event) => Actions.updateTask(task, event.target.value, task.repeats)}/>
      <span className={"btn repeat " + (task.repeats ? "enabled" : "disabled")} onClick={() => Actions.updateTask(task, task.name, !task.repeats)}><i className="fa fa-repeat" /></span>
      <span className="btn delete" onClick={() => Actions.deleteTask(task)}><i className="fa fa-trash" /></span>
    </li>;
  }
}

class AddTaskView extends Component {
  constructor() {
    super();
    this.state = {
      name: "",
      repeats: false
    }
  }
  updateName(event) {
    this.setState({
      name: event.target.value,
      repeats: this.state.repeats
    });
  }
  toggleRepeats() {
    this.setState({
      name: this.state.name,
      repeats: !this.state.repeats
    });
  }
  addTask() {
    Actions.createTask(this.state.name, this.state.repeats);
    this.setState({
      name: "",
      repeats: this.state.repeats
    });
  }
  render() {
    return <div className="add-task">
      <input ref="name" placeholder="New task" value={this.state.name}
        onChange={this.updateName.bind(this)}
        onKeyDown={(event) => {
          if(event.keyCode == 13)
            this.addTask();
        }}
      />
      <span className={"btn repeat " + (this.state.repeats ? "enabled" : "disabled")} onClick={this.toggleRepeats.bind(this)}><i className="fa fa-repeat" /></span>
      <button className="small" onClick={this.addTask.bind(this)}>Add</button>
    </div>;
  }
}

class TaskListView extends Component {
  render() {
    return <div className="task-list">
      <h1>Tasks</h1>
      <ol className="task-list">
        {this.props.tasks.map((task) => {
          return <TaskView key={task.id} task={task} />
        })}
      </ol>
      <AddTaskView />
      <button onClick={Actions.pickRandomTask} disabled={!this.props.tasks.length}>Roll</button>
    </div>;
  }
}

class CurrentTaskView extends Component {
  render() {
    let task = this.props.task;
    
    return <div className="current-task">
      <h1>Current Task</h1>
      <p>Do <span className="task">&quot;{task.name}&quot;</span> now!</p>
      <button onClick={Actions.finishSelectedTask}>Done</button>
    </div>;
  }
}

class AppView extends Component {
  constructor(props) {
    super(props);
    taskStore.onChange(() => {
      this.setState(this.getState());
    });

    this.state = this.getState();
  }
  getState() {
    return {
      selectedTask: taskStore.getSelectedTask(),
      tasks: taskStore.getTasks()
    };
  }
  render() {
    if(this.state.selectedTask)
      return <div>
        <CurrentTaskView task={this.state.selectedTask} />
      </div>;
    else
      return <div>
        <TaskListView tasks={this.state.tasks}/>
       </div>;
  }
}

ReactDOM.render(
  <AppView />,
  document.getElementById("mount")
);
